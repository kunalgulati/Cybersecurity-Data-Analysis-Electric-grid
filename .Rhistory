length(rules)
length(is.closed(rules))
length(is.closed(rules))
length(is.closed(closed_rules_one))
rules <- apriori(Groceries, parameter = list(supp = 0.001, target='frequent'))
length(rules)
summary(rules)
length(rules)
summary(rules)
closed_rules <- apriori(Groceries, parameter = list(supp = 0.1, target='frequent'))
summary(rules_two)
rules_two <- apriori(Groceries, parameter = list(supp = 0.1, target='frequent'))
summary(rules_two)
summary(closed_rules_one)
itemFrequencyPlot(Groceries,topN=20,type="absolute")
summary(rules)
rules_one <- apriori(Groceries, parameter = list(supp = 0.001, target='frequent')) #27835
rules_one
summary(rules_one)
rules_one
rules_one <- apriori(Groceries, parameter = list(supp = 0.001, target='frequent')) #27835
length(rules_one)
rules_one <- apriori(Groceries, parameter = list(supp = 0.001, target='frequent')) #27835
print('Frequent item set with minimum 0.001')
length(rules_one)
print('Frequent item set with minimum 0.001')
length(rules_one)
print(length(rules_one))
print('Frequent item set with minimum 0.001')
print(length(rules_one))
closed_rules_one <- apriori(Groceries, parameter = list(target = "closed",supp = 0.001))
length(closed_rules_one)
closed_rules_one <- apriori(Groceries, parameter = list(target = "closed",supp = 0.001))
closed_rules_two <- apriori(Groceries, parameter = list(target = "closed",supp = 0.01))
length(closed_rules_one)
length(closed_rules_one)
length(closed_rules_two)
rules_two <- apriori(Groceries, parameter = list(supp = 0.01, target='frequent'))
print(length(rule_two))
rules_two <- apriori(Groceries, parameter = list(supp = 0.01, target='frequent'))
print(length(rule_two))
print(length(rules_two))
rules_two <- apriori(Groceries, parameter = list(supp = 0.01, target='frequent'))
rules_two
rules_one <- apriori(Groceries, parameter = list(supp = 0.001, target='frequent'))
rules_two <- apriori(Groceries, parameter = list(supp = 0.01, target='frequent'))
print(length(rules_one))
print(length(rules_two))
summary(rules_two)
print(length(rules_one))
print(length(rules_two))
closed_rules_one <- apriori(Groceries, parameter = list(target = "closed",supp = 0.001))
closed_rules_one <- apriori(Groceries, parameter = list(target = "closed",supp = 0.001))
closed_rules_two <- apriori(Groceries, parameter = list(target = "closed",supp = 0.01))
length(closed_rules_one)
length(closed_rules_two)
closed_rules_one <- apriori(Groceries, parameter = list(target = "closed frequent itemsets",supp = 0.001))
length(closed_rules_one)
closed <- is.closed(rule_one)
closed <- is.closed(rules_one)
length(closed)
length(closed_rules_one)
closed <- is.closed(closed_rules_one)
closed_rules_one <- apriori(Groceries, parameter = list(target = "maximal",supp = 0.001))
maximal_role_one <- apriori(Groceries, parameter = list(target = "maximal",supp = 0.001))
maximal_rule_one <- apriori(Groceries, parameter = list(target = "maximal",supp = 0.001))
maximal_rule_two <- apriori(Groceries, parameter = list(target = "maximal",supp = 0.01))
length(maximal_role_one)
length(maximal_rule_two)
print('Frequent item set with minimum support 0.001') print(length(rules_one))
length(closed_rules_one)
closed_rules_one <- apriori(Groceries, parameter = list(target = "closed frequent itemsets",supp = 0.001))
closed_rules_two <- apriori(Groceries, parameter = list(target = "closed",supp = 0.01))
length(closed_rules_one)
rules_one <- apriori(Groceries, parameter = list(supp = 0.001, target='frequent'))
rules_two <- apriori(Groceries, parameter = list(supp = 0.01, target='frequent'))
print('Frequent item set with minimum support 0.001')
print(length(rules_one))
print('Frequent item set with minimum support 0.01')
print(length(rules_two))
closed_rules_one <- apriori(Groceries, parameter = list(target = "closed frequent itemsets",supp = 0.001))
closed_rules_two <- apriori(Groceries, parameter = list(target = "closed",supp = 0.01))
print('Closed Frequent itemsets with minimum support 0.001')
print(length(closed_rules_one))
print('Closed Frequent itemsets with minimum support 0.01')
print(length(closed_rules_two))
maximal_rule_one <- apriori(Groceries, parameter = list(target = "maximal",supp = 0.001))
maximal_rule_two <- apriori(Groceries, parameter = list(target = "maximal",supp = 0.01))
print('Maximal Frequent itemsets with minimum support 0.001')
print(length(maximal_role_one))
print('Maximal Frequent itemsets with minimum support 0.01')
print(length(maximal_rule_two))
print(length(closed_rules_one))
print(length(closed_rules_two))
set.seed(1)
rules_one <- apriori(Groceries, parameter = list(supp = 0.001, target='frequent'))
rules_two <- apriori(Groceries, parameter = list(supp = 0.01, target='frequent'))
print('Frequent item set with minimum support 0.001')
print(length(rules_one))
print('Frequent item set with minimum support 0.01')
print(length(rules_two))
closed_rules_one <- apriori(Groceries, parameter = list(target = "closed frequent itemsets",supp = 0.001))
closed_rules_two <- apriori(Groceries, parameter = list(target = "closed",supp = 0.01))
print('Closed Frequent itemsets with minimum support 0.001')
print(length(closed_rules_one))
print('Closed Frequent itemsets with minimum support 0.01')
print(length(closed_rules_two))
maximal_rule_one <- apriori(Groceries, parameter = list(target = "maximal",supp = 0.001))
maximal_rule_two <- apriori(Groceries, parameter = list(target = "maximal",supp = 0.01))
print('Maximal Frequent itemsets with minimum support 0.001')
print(length(maximal_role_one))
print('Maximal Frequent itemsets with minimum support 0.01')
print(length(maximal_rule_two))
maximal_rule_one <- apriori(Groceries, parameter = list(target = "maximal",supp = 0.001))
maximal_rule_two <- apriori(Groceries, parameter = list(target = "maximal",supp = 0.01))
print('Maximal Frequent itemsets with minimum support 0.001')
print(length(maximal_role_one))
print('Maximal Frequent itemsets with minimum support 0.01')
print(length(maximal_rule_two))
rules_one[1:20]
test<-rules_one[1:20]
test
print(test)
summary(test)
summary(test@support)
inspect(test)
rules_one <- apriori(Groceries, parameter = list(supp = 0.001, topN=10, target='frequent'))
itemFrequencyPlot(rules_one,
type="relative",
topN=10, # can be changed to the number of interest
horiz=TRUE,
col='steelblue3',
xlab='',
main='Item frequency, relative')
itemFrequencyPlot(Groceries, type="relative", topN=10, horiz=TRUE, col='steelblue3', xlab='', main='Item frequency, relative')
itemFrequencyPlot(Groceries, type="relative", topN=10, horiz=TRUE, col='steelblue3', xlab='', main='frequent itemsets')
itemFrequencyPlot(Groceries, type="relative", topN=10, horiz=TRUE, col='steelblue3', xlab='', main='frequency, relative')
itemFrequencyPlot(Groceries,  topN=10, horiz=TRUE, col='steelblue3', xlab='', main='frequent items')
itemFrequencyPlot(Groceries,parameter = list(supp = 0.001, target='frequent'),  topN=10, horiz=TRUE, col='steelblue3', xlab='', main='frequent items')
itemFrequencyPlot(Groceries,target='frequent',  topN=10, horiz=TRUE, col='steelblue3', xlab='', main='frequent items')
inspect(sort(rules_one, by='support', decreasing = T)[1:5])
inspect(sort(rules_one, by='support', decreasing = T)[1:10])
inspect(sort(rules_two, by='support', decreasing = T)[1:10])
inspect(sort(rules_one, by='support', decreasing = T)[1:10])
inspect(test)
inspect(sort(rules_one, by='support', decreasing = T)[1:10])
summary.Groceries <- summary(Groceries)
summary.Groceries <- summary(Groceries)
summary.Groceries <- summary(Groceries)
summary.Groceries <- summary(Groceries)
library("arules")
library(datasets)
data(Groceries)
summary.Groceries <- summary(Groceries)
plot(summary.Groceries@lengths, ylab='Number of Transactions', xlab='Number of Items in Transaction')
rules_one <- apriori(Groceries, parameter = list(supp = 0.001, target='frequent'))
rules_two <- apriori(Groceries, parameter = list(supp = 0.01, target='frequent'))
print('Frequent item set with minimum support 0.001')
print(length(rules_one))
print('Frequent item set with minimum support 0.01')
print(length(rules_two))
closed_rules_one <- apriori(Groceries, parameter = list(target = "closed",supp = 0.001))
closed_rules_two <- apriori(Groceries, parameter = list(target = "closed",supp = 0.01))
print('Closed Frequent itemsets with minimum support 0.001')
print(length(closed_rules_one))
print('Closed Frequent itemsets with minimum support 0.01')
print(length(closed_rules_two))
maximal_rule_one <- apriori(Groceries, parameter = list(target = "maximal",supp = 0.001))
maximal_rule_two <- apriori(Groceries, parameter = list(target = "maximal",supp = 0.01))
print('Maximal Frequent itemsets with minimum support 0.001')
print(length(maximal_role_one))
rules_one <- apriori(Groceries, parameter = list(supp = 0.001, target='frequent'))
rules_two <- apriori(Groceries, parameter = list(supp = 0.01, target='frequent'))
print('Frequent item set with minimum support 0.001')
print(length(rules_one))
print('Frequent item set with minimum support 0.01')
print(length(rules_two))
closed_rules_one <- apriori(Groceries, parameter = list(target = "closed",supp = 0.001))
closed_rules_two <- apriori(Groceries, parameter = list(target = "closed",supp = 0.01))
print('Closed Frequent itemsets with minimum support 0.001')
print(length(closed_rules_one))
print('Closed Frequent itemsets with minimum support 0.01')
print(length(closed_rules_two))
maximal_rule_one <- apriori(Groceries, parameter = list(target = "maximal",supp = 0.001))
maximal_rule_two <- apriori(Groceries, parameter = list(target = "maximal",supp = 0.01))
print('Maximal Frequent itemsets with minimum support 0.001')
print(length(maximal_rule_one))
print('Maximal Frequent itemsets with minimum support 0.01')
print(length(maximal_rule_two))
inspect(sort(rules_one, by='support', decreasing = T)[1:10])
rules <- apriori (Groceries, parameter = list(supp = 0.01, conf = 0.9
rules <- apriori (Groceries, parameter = list(supp = 0.01, conf = 0.9))
rules <- apriori(Groceries, parameter = listsupp = 0.01))
rules <- apriori(Groceries, parameter = list(supp = 0.01))
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.9))
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.9))
length(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.9, target='frequent'))
length(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.9, target='rules'))
length(rules)
inspect(head(rules))
inspect(head(rules))
rules <- apriori(Groceries, parameter = list(supp = 0.001, conf=0.9, target='rules'))
inspect(head(rules))
length(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.9))
length(rules)
length(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.1))
length(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.8))
length(rules)
rules = apriori(Groceries, parameter = list(supp = 0.01, conf=0.8))
length(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.7))
length(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.6))
length(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.5))
length(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.9))
length(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.5))
length(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.6))
length(rules)
length(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.5))
length(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf>0.5& conf<0.6))
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.5))
length(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf>0.5))
inspect(head( rules, by = "lift"))
rules_sales <- apriori(Groceries,
parameter=list(support =0.01, confidence =0.5),
appearance = list(rhs='whole milk'))
inspect(rules_sales)
rules_new <- apriori(Groceries,
parameter=list(support =0.01, confidence =0.5),
appearance = list(rhs='whole milk'))
inspect(rules_sales)
rules_whole_milk <- apriori(Groceries,
parameter=list(support =0.01, confidence =0.5),
appearance = list(rhs='whole milk'))
inspect(rules_whole_milk)
sort_rules_whole_milk <- sort(rules_whole_milk, by = "lift", decreasing = T)
inspect(sort_rules_whole_milk <- sort(rules_whole_milk, by = "lift", decreasing = T))
inspect(sort_rules_whole_milk <- sort(rules_whole_milk, by = "lift", decreasing = T))[1]
inspect(sort_rules_whole_milk <- sort(rules_whole_milk, by = "lift", decreasing = T))
inspect(sort_rules_whole_milk <- sort(rules_whole_milk, by = "lift", decreasing = T))
inspect(sort_rules_whole_milk <- sort(rules_whole_milk, by = "lift", decreasing = T))[1:1]
inspect(sort_rules_whole_milk <- sort(rules_whole_milk, by = "lift", decreasing = T))[1:]
inspect(sort_rules_whole_milk <- sort(rules_whole_milk, by = "lift", decreasing = T))[:1]
inspect(sort_rules_whole_milk <- sort(rules_whole_milk, by = "lift", decreasing = T))
inspect(sort_rules_whole_milk <- sort(rules_whole_milk, by = "lift", decreasing = T)[1])
library("arules")
library(datasets)
data(Groceries)
knitr::opts_chunk$set(echo = TRUE)
library(arules)
data(Groceries)
# Minimum Support = 0.001
rules1 <- apriori(Groceries, parameter = list(support = 0.001, target='frequent itemsets'))
summary.rules1 <- summary(rules1)
# Frequent itemsets
print("The number of frequent itemsets with minimum support 0.001 is:")
print(summary.rules1@length)
# Maximal Frequent Itemsets
t1 <- table(is.maximal(rules1))
print("The number of maximal frequent itemsets with minimum support 0.001 is:")
print(t1['TRUE'])
# Closed Frequent Itemsets
t2 <- table(is.closed(rules1))
print("The number of closed frequent itemsets with minimum support 0.001 is:")
print(t2['TRUE'])
# Minimum Support = 0.01
rules2 <- apriori(Groceries, parameter = list(support = 0.01, target='frequent itemsets'))
summary.rules2 <- summary(rules2)
# Frequent itemsets
print("The number of frequent itemsets with minimum support 0.01 is:")
print(summary.rules2@length)
# Maximal Frequent Itemsets
t3 <- table(is.maximal(rules2))
print("The number of maximal frequent itemsets with minimum support 0.01 is:")
print(t3['TRUE'])
# Closed Frequent Itemsets
t4 <- table(is.closed(rules2))
print("The number of closed frequent itemsets with minimum support minimum 0.01 is:")
print(t4['TRUE'])
rules_one <- apriori(Groceries, parameter = list(supp = 0.001, target='frequent'))
closed_rules_two <- apriori(Groceries, parameter = list(target = "closed",supp = 0.01))
maximal_rule_one <- apriori(Groceries, parameter = list(target = "maximal",supp = 0.001))
#frequent for 0.001
print('Frequent item set with minimum support 0.001')
print(length(rules_one))
#closed for 0.001
print('Closed Frequent itemsets with minimum support 0.001')
print(length(closed_rules_one))
#Maximal for 0.001
print('Maximal Frequent itemsets with minimum support 0.001')
print(length(maximal_rule_one))
rules_two <- apriori(Groceries, parameter = list(supp = 0.01, target='frequent'))
closed_rules_one <- apriori(Groceries, parameter = list(target = "closed",supp = 0.001))
maximal_rule_two <- apriori(Groceries, parameter = list(target = "maximal",supp = 0.01))
#Frequent for 0.01
print('Frequent item set with minimum support 0.01')
print(length(rules_two))
#Closed for 0.01
print('Closed Frequent itemsets with minimum support 0.01')
print(length(closed_rules_two))
#Maximal for 0.01
print('Maximal Frequent itemsets with minimum support 0.01')
print(length(maximal_rule_two))
rules_one <- apriori(Groceries, parameter = list(supp = 0.001, target='frequent'))
closed_rules_two <- apriori(Groceries, parameter = list(target = "closed",supp = 0.01))
maximal_rule_one <- apriori(Groceries, parameter = list(target = "maximal",supp = 0.001))
rules_two <- apriori(Groceries, parameter = list(supp = 0.01, target='frequent'))
closed_rules_one <- apriori(Groceries, parameter = list(target = "closed",supp = 0.001))
maximal_rule_two <- apriori(Groceries, parameter = list(target = "maximal",supp = 0.01))
#frequent for 0.001
print('Frequent item set with minimum support 0.001')
print(length(rules_one))
#closed for 0.001
print('Closed Frequent itemsets with minimum support 0.001')
print(length(closed_rules_one))
#Maximal for 0.001
print('Maximal Frequent itemsets with minimum support 0.001')
print(length(maximal_rule_one))
#Frequent for 0.01
print('Frequent item set with minimum support 0.01')
print(length(rules_two))
#Closed for 0.01
print('Closed Frequent itemsets with minimum support 0.01')
print(length(closed_rules_two))
#Maximal for 0.01
print('Maximal Frequent itemsets with minimum support 0.01')
print(length(maximal_rule_two))
print("Ten items with the highest support.")
inspect(sort(rules_one, by='support', decreasing = T)[1:10])
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.5))
length(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.5))
print("Number of rules") length(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.5))
print("Number of rules", length(rules))
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.5))
print("Number of rules")
length(rules)
rules_whole_milk <- apriori(Groceries,
parameter=list(support =0.01, confidence =0.5),
appearance = list(rhs='whole milk'))
print("Rules having WHOLE MILK in their RHS are")
inspect(rules_whole_milk)
inspect(sort_rules_whole_milk <- sort(rules_whole_milk, by = "lift", decreasing = T)[1])
print("Here is the item with the highest lift value:")
inspect(sort(rules.wholemilk, by='lift')[1])
rules.wholemilk <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.5), appearance = list(rhs='whole milk'))
print("Rules that have 'whole milk' in their RHS: ")
inspect(rules.wholemilk)
print("Here is the item with the highest lift value:")
inspect(sort(rules.wholemilk, by='lift')[1])
inspect(sort_rules_whole_milk <- sort(rules_whole_milk, by = "lift", decreasing = T)[1])
inspect(sort_rules_whole_milk <- sort(rules_whole_milk, by = "lift", decreasing = T)[1])
clear
install.packages("depmixS4")
--v
R --version
R --version
install.packages('devtools')
clear
install.packages("depmixS4")
library("depmixS4")
install.packages("depmixS4")
library("depmixS4")
library("psych")
library("ggplot2")
library("corrplot")
library("gridExtra")
library("fpp2")
# Returns object
# Object[1] = Model
# Object[2] = fm
# Object[3] = normalize_loglikehood
Hmm_model <- function(data, parm_variable, param_family, number_of_states) {
model <- depmix(parm_variable, data = data,
nstates = number_of_states, family=param_family, ntimes = nrow(data))
fm <- fit(model)
normalize_loglikehood <- logLik(fm) / nrow(data)
result <- list(model, fm, normalize_loglikehood  )
return(result)
}
Hmm_model <- function(data, parm_variable, param_family, number_of_states) {
model <- depmix(parm_variable, data = data,
nstates = number_of_states, family=param_family, ntimes = nrow(data))
fm <- fit(model)
normalize_loglikehood <- logLik(fm) / nrow(data)
result <- list(model, fm, normalize_loglikehood  )
return(result)
}
# SUBPART 1 : Select Global Active Power (main feature) and Global Intensity as features - split train and test data
data <- read.csv(file="TrainData.txt", header=TRUE, sep=",", na.strings = c("", "NA"))
# Test Data
test1 <- read.csv(file="test1.txt", header=TRUE, sep=",", na.strings = c("", "NA"))
test2 <- read.csv(file="test2.txt", header=TRUE, sep=",", na.strings = c("", "NA"))
test3 <- read.csv(file="test3.txt", header=TRUE, sep=",", na.strings = c("", "NA"))
test4 <- read.csv(file="test4.txt", header=TRUE, sep=",", na.strings = c("", "NA"))
test5 <- read.csv(file="test5.txt", header=TRUE, sep=",", na.strings = c("", "NA"))
data <- na.omit(data)
# row_id <- rownames(data)
# data <- cbind(id=row_id,data)
# Result from part 1 indicate that GAP and Global Intensity are highly correlated
data$Year <- as.numeric(format(as.Date(data$Date, "%d/%m/%Y"), "%Y"))
data$Day <- as.POSIXlt(data$Date)$wday
x <- paste(data$Date, data$Time)
dateTime <- as.POSIXlt(x, format = "%d/%m/%Y %H:%M:%S")
# Derive week and filter for week 7
data$Week <- strftime(dateTime, format = "%V")
setwd("~/OneDrive - sfu.ca/SFU-New/courses/Spring 2020/cmpt 318/CMPT318-Final-Project/cmpt318-final-project")
test1 <- read.csv(file="test1.txt", header=TRUE, sep=",", na.strings = c("", "NA"))
test2 <- read.csv(file="test2.txt", header=TRUE, sep=",", na.strings = c("", "NA"))
test3 <- read.csv(file="test3.txt", header=TRUE, sep=",", na.strings = c("", "NA"))
test4 <- read.csv(file="test4.txt", header=TRUE, sep=",", na.strings = c("", "NA"))
test5 <- read.csv(file="test5.txt", header=TRUE, sep=",", na.strings = c("", "NA"))
data <- na.omit(data)
data$Year <- as.numeric(format(as.Date(data$Date, "%d/%m/%Y"), "%Y"))
data$Day <- as.POSIXlt(data$Date)$wday
x <- paste(data$Date, data$Time)
dateTime <- as.POSIXlt(x, format = "%d/%m/%Y %H:%M:%S")
data <- na.omit(data)
data$Year <- as.numeric(format(as.Date(data$Date, "%d/%m/%Y"), "%Y"))
data <- read.csv(file="TrainData.txt", header=TRUE, sep=",", na.strings = c("", "NA"))
data$Year <- as.numeric(format(as.Date(data$Date, "%d/%m/%Y"), "%Y"))
data$Day <- as.POSIXlt(data$Date)$wday
x <- paste(data$Date, data$Time)
dateTime <- as.POSIXlt(x, format = "%d/%m/%Y %H:%M:%S")
data$Week <- strftime(dateTime, format = "%V")
filter_morning <- subset(data, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
filter_evening <- subset(data, (strptime(Time, format = "%H:%M:%S") >= strptime("17:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("21:30:00", format = "%H:%M:%S")))
training_morning <- subset(filter_morning, filter_morning$Year != 2009)
training_evening <- subset(filter_evening, filter_evening$Year != 2009)
# Aggregate the data for Morning and Evening
training_morning <- aggregate(list(Global_active_power = training_morning$Global_active_power, Global_intensity = training_morning$Global_intensity), by=list(Week = training_morning$Week, Day = training_morning$Day), mean)
training_evening <- aggregate(list(Global_active_power = training_evening$Global_active_power, Global_intensity = training_evening$Global_intensity), by=list(Week = training_evening$Week, Day = training_evening$Day), mean)
test_morning <- subset(filter_morning, filter_morning$Year == 2009)
test_evening <- subset(filter_evening, filter_evening$Year == 2009)
# Aggregate the data
test_morning <- aggregate(list(Global_active_power = test_morning$Global_active_power, Global_intensity = test_morning$Global_intensity), by=list(Week = test_morning$Week, Day = test_morning$Day), mean)
test_evening <- aggregate(list(Global_active_power = test_evening$Global_active_power, Global_intensity = test_evening$Global_intensity), by=list(Week = test_evening$Week, Day = test_evening$Day), mean)
test1_morning <- subset(filter_morning)
test1_evening <- subset(filter_evening)
test1_morning <- aggregate(list(Global_active_power = test1_morning$Global_active_power,
Global_intensity = test1_morning$Global_intensity), by=list(Week = test1_morning$Week, Day = test1_morning$Day), mean)
test1_evening <- aggregate(list(Global_active_power = test1_evening$Global_active_power,
Global_intensity = test1_evening$Global_intensity), by=list(Week = test1_evening$Week, Day = test1_evening$Day), mean)
nrow(training_morning)
nrow(test1_morning)
test1 <- read.csv(file="test1.txt", header=TRUE, sep=",", na.strings = c("", "NA"))
data <- read.csv(file="TrainData.txt", header=TRUE, sep=",", na.strings = c("", "NA"))
nrow(test1)
nrow(data)
data <- read.csv(file="TrainData.txt", header=TRUE, sep=",", na.strings = c("", "NA"))
data <- na.omit(data)
filter_morning <- subset(data, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
filter_evening <- subset(data, (strptime(Time, format = "%H:%M:%S") >= strptime("17:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("21:30:00", format = "%H:%M:%S")))
training_morning <- subset(filter_morning, filter_morning$Year != 2009)
training_evening <- subset(filter_evening, filter_evening$Year != 2009)
nrow(training_morning)
nrow(training_morning)
training_morning <- subset(filter_morning, filter_morning$Year != 2009)
training_evening <- subset(filter_evening, filter_evening$Year != 2009)
nrow(training_morning)
nrow(filter_morning)
filter_morning <- subset(data, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
filter_evening <- subset(data, (strptime(Time, format = "%H:%M:%S") >= strptime("17:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("21:30:00", format = "%H:%M:%S")))
nrow(filter_morning)
training_morning <- subset(filter_morning, filter_morning$Year != 2009)
nrow(training_morning)
training_morning <- subset(filter_morning, filter_morning$Year != 2009)
training_morning <- subset(filter_morning, filter_morning$Year != 2009)
nrow(training_morning)
View(filter_morning)
View(filter_morning)
View(filter_morning)
data$Year <- as.numeric(format(as.Date(data$Date, "%d/%m/%Y"), "%Y"))
data$Day <- as.POSIXlt(data$Date)$wday
x <- paste(data$Date, data$Time)
dateTime <- as.POSIXlt(x, format = "%d/%m/%Y %H:%M:%S")
# Derive week and filter for week 7
data$Week <- strftime(dateTime, format = "%V")
filter_morning <- subset(data, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
training_morning <- subset(filter_morning, filter_morning$Year != 2009)
nrow(tarining_morning)
nrow(training_morning)
test1_morning <- subset(filter_morning)
test1_evening <- subset(filter_evening)
test1_morning <- subset(test1, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
nrow(test1_morning)
test1_model_morning <- Hmm_model(test1_morning, list(Global_active_power ~ 1, Global_intensity ~ 1),
list(gaussian(), multinomial("identity")), 4)
training_morning <- aggregate(list(Global_active_power = training_morning$Global_active_power, Global_intensity = training_morning$Global_intensity), by=list(Week = training_morning$Week, Day = training_morning$Day), mean)
test1_morning <- aggregate(list(Global_active_power = test1_morning$Global_active_power,
Global_intensity = test1_morning$Global_intensity), by=list(Week = test1_morning$Week, Day = test1_morning$Day), mean)
test1_morning <- subset(test1, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
test1_morning <- aggregate(list(Global_active_power = test1_morning$Global_active_power,
Global_intensity = test1_morning$Global_intensity), by=list(Week = test1_morning$Week, Day = test1_morning$Day), mean)
View(test_morning)
View(test_morning)
View(test1_morning)
View(test1_morning)
test1_morning <- subset(test1, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
