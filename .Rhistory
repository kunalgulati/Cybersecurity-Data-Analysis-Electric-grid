t4 <- table(is.closed(rules2))
print("The number of closed frequent itemsets with minimum support minimum 0.01 is:")
print(t4['TRUE'])
rules_one <- apriori(Groceries, parameter = list(supp = 0.001, target='frequent'))
closed_rules_two <- apriori(Groceries, parameter = list(target = "closed",supp = 0.01))
maximal_rule_one <- apriori(Groceries, parameter = list(target = "maximal",supp = 0.001))
#frequent for 0.001
print('Frequent item set with minimum support 0.001')
print(length(rules_one))
#closed for 0.001
print('Closed Frequent itemsets with minimum support 0.001')
print(length(closed_rules_one))
#Maximal for 0.001
print('Maximal Frequent itemsets with minimum support 0.001')
print(length(maximal_rule_one))
rules_two <- apriori(Groceries, parameter = list(supp = 0.01, target='frequent'))
closed_rules_one <- apriori(Groceries, parameter = list(target = "closed",supp = 0.001))
maximal_rule_two <- apriori(Groceries, parameter = list(target = "maximal",supp = 0.01))
#Frequent for 0.01
print('Frequent item set with minimum support 0.01')
print(length(rules_two))
#Closed for 0.01
print('Closed Frequent itemsets with minimum support 0.01')
print(length(closed_rules_two))
#Maximal for 0.01
print('Maximal Frequent itemsets with minimum support 0.01')
print(length(maximal_rule_two))
rules_one <- apriori(Groceries, parameter = list(supp = 0.001, target='frequent'))
closed_rules_two <- apriori(Groceries, parameter = list(target = "closed",supp = 0.01))
maximal_rule_one <- apriori(Groceries, parameter = list(target = "maximal",supp = 0.001))
rules_two <- apriori(Groceries, parameter = list(supp = 0.01, target='frequent'))
closed_rules_one <- apriori(Groceries, parameter = list(target = "closed",supp = 0.001))
maximal_rule_two <- apriori(Groceries, parameter = list(target = "maximal",supp = 0.01))
#frequent for 0.001
print('Frequent item set with minimum support 0.001')
print(length(rules_one))
#closed for 0.001
print('Closed Frequent itemsets with minimum support 0.001')
print(length(closed_rules_one))
#Maximal for 0.001
print('Maximal Frequent itemsets with minimum support 0.001')
print(length(maximal_rule_one))
#Frequent for 0.01
print('Frequent item set with minimum support 0.01')
print(length(rules_two))
#Closed for 0.01
print('Closed Frequent itemsets with minimum support 0.01')
print(length(closed_rules_two))
#Maximal for 0.01
print('Maximal Frequent itemsets with minimum support 0.01')
print(length(maximal_rule_two))
print("Ten items with the highest support.")
inspect(sort(rules_one, by='support', decreasing = T)[1:10])
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.5))
length(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.5))
print("Number of rules") length(rules)
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.5))
print("Number of rules", length(rules))
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.5))
print("Number of rules")
length(rules)
rules_whole_milk <- apriori(Groceries,
parameter=list(support =0.01, confidence =0.5),
appearance = list(rhs='whole milk'))
print("Rules having WHOLE MILK in their RHS are")
inspect(rules_whole_milk)
inspect(sort_rules_whole_milk <- sort(rules_whole_milk, by = "lift", decreasing = T)[1])
print("Here is the item with the highest lift value:")
inspect(sort(rules.wholemilk, by='lift')[1])
rules.wholemilk <- apriori(Groceries, parameter = list(supp = 0.01, conf=0.5), appearance = list(rhs='whole milk'))
print("Rules that have 'whole milk' in their RHS: ")
inspect(rules.wholemilk)
print("Here is the item with the highest lift value:")
inspect(sort(rules.wholemilk, by='lift')[1])
inspect(sort_rules_whole_milk <- sort(rules_whole_milk, by = "lift", decreasing = T)[1])
inspect(sort_rules_whole_milk <- sort(rules_whole_milk, by = "lift", decreasing = T)[1])
clear
install.packages("depmixS4")
--v
R --version
R --version
install.packages('devtools')
clear
install.packages("depmixS4")
library("depmixS4")
install.packages("depmixS4")
clear
setwd("~/OneDrive - sfu.ca/SFU-New/courses/Spring 2020/cmpt 318/CMPT318-Final-Project/cmpt318-final-project")
library("depmixS4")
library("psych")
library("ggplot2")
library("corrplot")
library("gridExtra")
library("fpp2")
library("depmixS4")
library("psych")
library("ggplot2")
library("corrplot")
library("gridExtra")
library("fpp2")
# Returns object
# Object[1] = Model
# Object[2] = fm
# Object[3] = normalize_loglikehood
Hmm_model <- function(data, parm_variable, param_family, number_of_states) {
model <- depmix(parm_variable, data = data,
nstates = number_of_states, family=param_family, ntimes = nrow(data))
fm <- fit(model)
normalize_loglikehood <- logLik(fm) / nrow(data)
result <- list(model, fm, normalize_loglikehood  )
return(result)
}
data <- read.csv(file="TrainData.txt", header=TRUE, sep=",", na.strings = c("", "NA"))
# Test Data
test1 <- read.csv(file="test1.txt", header=TRUE, sep=",", na.strings = c("", "NA"))
test2 <- read.csv(file="test2.txt", header=TRUE, sep=",", na.strings = c("", "NA"))
test3 <- read.csv(file="test3.txt", header=TRUE, sep=",", na.strings = c("", "NA"))
test4 <- read.csv(file="test4.txt", header=TRUE, sep=",", na.strings = c("", "NA"))
test5 <- read.csv(file="test5.txt", header=TRUE, sep=",", na.strings = c("", "NA"))
data <- na.omit(data)
# Result from part 1 indicate that GAP and Global Intensity are highly correlated
data$Year <- as.numeric(format(as.Date(data$Date, "%d/%m/%Y"), "%Y"))
data$Day <- as.POSIXlt(data$Date)$wday
x <- paste(data$Date, data$Time)
dateTime <- as.POSIXlt(x, format = "%d/%m/%Y %H:%M:%S")
# Derive week and filter for week 7
data$Week <- strftime(dateTime, format = "%V")
training_morning <- subset(filter_morning, filter_morning$Year != 2009)
training_evening <- subset(filter_evening, filter_evening$Year != 2009)
# Aggregate the data for Morning and Evening
training_morning <- aggregate(list(Global_active_power = training_morning$Global_active_power, Global_intensity = training_morning$Global_intensity), by=list(Week = training_morning$Week, Day = training_morning$Day), mean)
training_evening <- aggregate(list(Global_active_power = training_evening$Global_active_power, Global_intensity = training_evening$Global_intensity), by=list(Week = training_evening$Week, Day = training_evening$Day), mean)
filter_morning <- subset(data, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
filter_evening <- subset(data, (strptime(Time, format = "%H:%M:%S") >= strptime("17:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("21:30:00", format = "%H:%M:%S")))
# Filtering data by Morning and Evening
training_morning <- subset(filter_morning, filter_morning$Year != 2009)
training_evening <- subset(filter_evening, filter_evening$Year != 2009)
# Aggregate the data for Morning and Evening
training_morning <- aggregate(list(Global_active_power = training_morning$Global_active_power, Global_intensity = training_morning$Global_intensity), by=list(Week = training_morning$Week, Day = training_morning$Day), mean)
training_evening <- aggregate(list(Global_active_power = training_evening$Global_active_power, Global_intensity = training_evening$Global_intensity), by=list(Week = training_evening$Week, Day = training_evening$Day), mean)
# ========================================================= Created TEST Data set ========================================================= #
# Filtering data by morning and evening
test_morning <- subset(filter_morning, filter_morning$Year == 2009)
test_evening <- subset(filter_evening, filter_evening$Year == 2009)
# Aggregate the data
test_morning <- aggregate(list(Global_active_power = test_morning$Global_active_power, Global_intensity = test_morning$Global_intensity), by=list(Week = test_morning$Week, Day = test_morning$Day), mean)
test_evening <- aggregate(list(Global_active_power = test_evening$Global_active_power, Global_intensity = test_evening$Global_intensity), by=list(Week = test_evening$Week, Day = test_evening$Day), mean)
test1_morning <- subset(test1, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
test1_evening <- subset(test1, (strptime(Time, format = "%H:%M:%S") >= strptime("17:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("21:30:00", format = "%H:%M:%S")))
# TEST SET #2
test2_morning <- subset(test2, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
test2_evening <- subset(test2, (strptime(Time, format = "%H:%M:%S") >= strptime("17:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("21:30:00", format = "%H:%M:%S")))
# TEST SET #2
test3_morning <- subset(test3, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
test3_evening <- subset(test3, (strptime(Time, format = "%H:%M:%S") >= strptime("17:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("21:30:00", format = "%H:%M:%S")))
# TEST SET #2
test4_morning <- subset(test4, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
test4_evening <- subset(test4, (strptime(Time, format = "%H:%M:%S") >= strptime("17:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("21:30:00", format = "%H:%M:%S")))
# TEST SET #2
test5_morning <- subset(test5, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
test5_evening <- subset(test5, (strptime(Time, format = "%H:%M:%S") >= strptime("17:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("21:30:00", format = "%H:%M:%S")))
test1_morning <- aggregate(list(Global_active_power = test1_morning$Global_active_power,
Global_intensity = test1_morning$Global_intensity), by=list(Week = test1_morning$Week, Day = test1_morning$Day), mean)
test1_evening <- aggregate(list(Global_active_power = test1_evening$Global_active_power,
Global_intensity = test1_evening$Global_intensity), by=list(Week = test1_evening$Week, Day = test1_evening$Day), mean)
View(test1_evening)
test1_morning <- aggregate(list(Global_active_power = test1_morning$Global_active_power, Global_intensity = test1_morning$Global_intensity), by=list(Week = test1_morning$Week, Day = test1_morning$Day), mean)
clear
test1_morning
nrow(test1_morning)
nrow(test1_morning$Global_active_power)
test1_morning <- aggregate(list(Global_active_power = test1_morning$Global_active_power,
Global_intensity = test1_morning$Global_intensity), by=list(Week = test1_morning$Week, Day = test1_morning$Day), mean)
test1 <- na.omit(test1)
test1_morning <- subset(test1, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
test1_morning <- aggregate(list(Global_active_power = test1_morning$Global_active_power,
Global_intensity = test1_morning$Global_intensity), by=list(Week = test1_morning$Week, Day = test1_morning$Day), mean)
test1 <- na.omit(test1)
test2 <- na.omit(test2)
test3 <- na.omit(test3)
test4 <- na.omit(test4)
test5 <- na.omit(test5)
test1_morning <- subset(test1, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
test1_evening <- subset(test1, (strptime(Time, format = "%H:%M:%S") >= strptime("17:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("21:30:00", format = "%H:%M:%S")))
# TEST SET #2
test2_morning <- subset(test2, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
test2_evening <- subset(test2, (strptime(Time, format = "%H:%M:%S") >= strptime("17:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("21:30:00", format = "%H:%M:%S")))
# TEST SET #2
test3_morning <- subset(test3, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
test3_evening <- subset(test3, (strptime(Time, format = "%H:%M:%S") >= strptime("17:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("21:30:00", format = "%H:%M:%S")))
# TEST SET #2
test4_morning <- subset(test4, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
test4_evening <- subset(test4, (strptime(Time, format = "%H:%M:%S") >= strptime("17:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("21:30:00", format = "%H:%M:%S")))
# TEST SET #2
test5_morning <- subset(test5, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
test5_evening <- subset(test5, (strptime(Time, format = "%H:%M:%S") >= strptime("17:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("21:30:00", format = "%H:%M:%S")))
test1_morning <- aggregate(list(Global_active_power = test1_morning$Global_active_power,
Global_intensity = test1_morning$Global_intensity), by=list(Week = test1_morning$Week, Day = test1_morning$Day), mean)
test1_evening <- aggregate(list(Global_active_power = test1_evening$Global_active_power,
Global_intensity = test1_evening$Global_intensity), by=list(Week = test1_evening$Week, Day = test1_evening$Day), mean)
test1 <- na.omit(test1)
test2 <- na.omit(test2)
test3 <- na.omit(test3)
test4 <- na.omit(test4)
test5 <- na.omit(test5)
test1_morning <- subset(test1, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
test1_evening <- subset(test1, (strptime(Time, format = "%H:%M:%S") >= strptime("17:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("21:30:00", format = "%H:%M:%S")))
test1$Year <- as.numeric(format(as.Date(test1$Date, "%d/%m/%Y"), "%Y"))
test1$Day <- as.POSIXlt(test1$Date)$wday
x <- paste(test1$Date, test1$Time)
dateTime <- as.POSIXlt(x, format = "%d/%m/%Y %H:%M:%S")
# Derive week and filter for week 7
test1$Week <- strftime(dateTime, format = "%V")
test1_morning <- subset(test1, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
test1_morning <- aggregate(list(Global_active_power = test1_morning$Global_active_power,
Global_intensity = test1_morning$Global_intensity), by=list(Week = test1_morning$Week, Day = test1_morning$Day), mean)
test1 <- Add_date(test1)
test2 <- Add_date(test2)
test3 <- Add_date(test3)
test4 <- Add_date(test4)
test5 <- Add_date(test5)
Add_date <- function(data){
data$Year <- as.numeric(format(as.Date(test1$Date, "%d/%m/%Y"), "%Y"))
data$Day <- as.POSIXlt(data$Date)$wday
x <- paste(data$Date, data$Time)
dateTime <- as.POSIXlt(x, format = "%d/%m/%Y %H:%M:%S")
# Derive week and filter for week 7
data$Week <- strftime(dateTime, format = "%V")
return(data)
}
test1 <- Add_date(test1)
test2 <- Add_date(test2)
test3 <- Add_date(test3)
test4 <- Add_date(test4)
test5 <- Add_date(test5)
test1_morning <- subset(test1, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
test1_evening <- subset(test1, (strptime(Time, format = "%H:%M:%S") >= strptime("17:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("21:30:00", format = "%H:%M:%S")))
# TEST SET #2
test2_morning <- subset(test2, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
test2_evening <- subset(test2, (strptime(Time, format = "%H:%M:%S") >= strptime("17:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("21:30:00", format = "%H:%M:%S")))
# TEST SET #2
test3_morning <- subset(test3, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
test3_evening <- subset(test3, (strptime(Time, format = "%H:%M:%S") >= strptime("17:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("21:30:00", format = "%H:%M:%S")))
# TEST SET #2
test4_morning <- subset(test4, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
test4_evening <- subset(test4, (strptime(Time, format = "%H:%M:%S") >= strptime("17:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("21:30:00", format = "%H:%M:%S")))
# TEST SET #2
test5_morning <- subset(test5, (strptime(Time, format = "%H:%M:%S") >= strptime("05:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("09:30:00", format = "%H:%M:%S")))
test5_evening <- subset(test5, (strptime(Time, format = "%H:%M:%S") >= strptime("17:30:00", format = "%H:%M:%S")) & (strptime(Time, format = "%H:%M:%S") <= strptime("21:30:00", format = "%H:%M:%S")))
test1_morning <- aggregate(list(Global_active_power = test1_morning$Global_active_power,
Global_intensity = test1_morning$Global_intensity), by=list(Week = test1_morning$Week, Day = test1_morning$Day), mean)
test1_evening <- aggregate(list(Global_active_power = test1_evening$Global_active_power,
Global_intensity = test1_evening$Global_intensity), by=list(Week = test1_evening$Week, Day = test1_evening$Day), mean)
# TEST SET #2
test2_morning <- aggregate(list(Global_active_power = test2_morning$Global_active_power,
Global_intensity = test2_morning$Global_intensity), by=list(Week = test2_morning$Week, Day = test2_morning$Day), mean)
test2_evening <- aggregate(list(Global_active_power = test2_evening$Global_active_power,
Global_intensity = test2_evening$Global_intensity), by=list(Week = test2_evening$Week, Day = test2_evening$Day), mean)
# TEST SET #3
test3_morning <- aggregate(list(Global_active_power = test3_morning$Global_active_power,
Global_intensity = test3_morning$Global_intensity), by=list(Week = test3_morning$Week, Day = test3_morning$Day), mean)
test3_evening <- aggregate(list(Global_active_power = test3_evening$Global_active_power,
Global_intensity = test3_evening$Global_intensity), by=list(Week = test3_evening$Week, Day = test3_evening$Day), mean)
# TEST SET #4
test4_morning <- aggregate(list(Global_active_power = test4_morning$Global_active_power,
Global_intensity = test4_morning$Global_intensity), by=list(Week = test4_morning$Week, Day = test4_morning$Day), mean)
test4_evening <- aggregate(list(Global_active_power = test4_evening$Global_active_power,
Global_intensity = test4_evening$Global_intensity), by=list(Week = test4_evening$Week, Day = test4_evening$Day), mean)
# TEST SET #5
test5_morning <- aggregate(list(Global_active_power = test5_morning$Global_active_power,
Global_intensity = test5_morning$Global_intensity), by=list(Week = test5_morning$Week, Day = test5_morning$Day), mean)
test5_evening <- aggregate(list(Global_active_power = test5_evening$Global_active_power,
Global_intensity = test5_evening$Global_intensity), by=list(Week = test5_evening$Week, Day = test5_evening$Day), mean)
model_morning_0 <- Hmm_model(training_morning, list(Global_active_power ~ 1, Global_intensity ~ 1),
list(gaussian(), multinomial("identity")), 4)
test_model_morning <- Hmm_model(test_morning, list(Global_active_power ~ 1, Global_intensity ~ 1),
list(gaussian(), multinomial("identity")), 4)
test_model_evening <- Hmm_model(test_evening, list(Global_active_power ~ 1, Global_intensity ~ 1),
list(gaussian(), multinomial("identity")), 4)
model_match_evening <- getpars(model_evening_0[[1]]) # best model with states = 4
model_match_evening <- model_match_evening[1:1164]  #Match the new_model_morning size
# SetPars
test_evening_setpars <- setpars(test_model_evening[[1]], model_match_evening)
normalize_test_morning_loglike <- logLik(test_evening_setpars) / nrow(test_evening)
BIC(test_evening_setpars)
test_model_morning <- Hmm_model(test_morning, list(Global_active_power ~ 1, Global_intensity ~ 1),
list(gaussian(), multinomial("identity")), 4)
model_match_morning <- getpars(model_morning_0[[1]]) # best model with states = 4
model_match_morning <- model_match_morning[1:1164]  #Match the new_model_morning size
# SetPars
test_morning_setpars <- setpars(test_model_morning[[1]], model_match_morning)
normalize_test_morning_loglike <- logLik(test_morning_setpars) / nrow(test_morning)
BIC(test_morning_setpars)
test1_model_morning <- Hmm_model(test1_morning, list(Global_active_power ~ 1, Global_intensity ~ 1),
list(gaussian(), multinomial("identity")), 4)
a <- getpars(model_morning_0[[1]])
aa <- getpars(test1_model_morning[[1]])
temp[1][1]=kunal
temp[1][1]="kunal"
temp[[]]
temp  = [[]]
nrow(a)
lent(a)
len(a)
length(a)
length(aa)
length(test_model_evening)
model_evening_0 <- Hmm_model(training_evening, list(Global_active_power ~ 1, Global_intensity ~ 1),
list(gaussian(), multinomial("identity")), 4)
test1_model_morning <- Hmm_model(test1_morning, list(Global_active_power ~ 1, Global_intensity ~ 1),
list(gaussian(), multinomial("identity")), 4)
test2_model_morning <- Hmm_model(test2_morning, list(Global_active_power ~ 1, Global_intensity ~ 1),
list(gaussian(), multinomial("identity")), 4)
test3_model_morning <- Hmm_model(test3_morning, list(Global_active_power ~ 1, Global_intensity ~ 1),
list(gaussian(), multinomial("identity")), 4)
test4_model_morning <- Hmm_model(test4_morning, list(Global_active_power ~ 1, Global_intensity ~ 1),
list(gaussian(), multinomial("identity")), 4)
test5_model_morning <- Hmm_model(test5_morning, list(Global_active_power ~ 1, Global_intensity ~ 1),
list(gaussian(), multinomial("identity")), 4)
test1_morning_result <- Model_comparison(model_morning_0, test1_morning)
Model_comparison <- function(training_model, test_model){
match_model <- getpars(training_model[[1]])
test_model_length <- length(test_model)
#Match the new_model_morning size
match_model <- match_model[1:test_model_length]
# Compare the test vs training model
test <- setpars(test_model[[1]], match_model)
# Calculate Normalize Log-likelihood and BIC for test
normalize_test_loglike <- logLik(test) / nrow(test_model)
bic <- BIC(test)
# Create a return Object
result <- list(normalize_test_loglike, bic)
return(result)
}
test1_morning_result <- Model_comparison(model_morning_0, test1_morning)
test1_morning_result <- Model_comparison(model_morning_0[[1]], test1_morning[[1]])
test1_morning_result <- Model_comparison(model_morning_0[[1]], test1_morning[[1]])
Model_comparison <- function(training_model, test_model){
match_model <- getpars(training_model)
test_model_length <- length(test_model)
#Match the new_model_morning size
match_model <- match_model[1:test_model_length]
# Compare the test vs training model
test <- setpars(test_model, match_model)
# Calculate Normalize Log-likelihood and BIC for test
normalize_test_loglike <- logLik(test) / nrow(test_model)
bic <- BIC(test)
# Create a return Object
result <- list(normalize_test_loglike, bic)
return(result)
}
test1_morning_result <- Model_comparison(model_morning_0[[1]], test1_morning[[1]])
match_model
test1_morning_result <- Model_comparison(model_morning_0[[1]], test1_morning[[1]])
test1_morning_result <- Model_comparison(model_morning_0[[1]], test1_morning[[1]])
Model_comparison <- function(training_model, test_model){
match_model <- getpars(training_model)
test_model_length <- length(test_model)
print(test_model_length)
#Match the new_model_morning size
match_model <- match_model[1:test_model_length]
# Compare the test vs training model
test <- setpars(test_model, match_model)
# Calculate Normalize Log-likelihood and BIC for test
normalize_test_loglike <- logLik(test) / nrow(test_model)
bic <- BIC(test)
# Create a return Object
result <- list(normalize_test_loglike, bic)
return(result)
}
test1_morning_result <- Model_comparison(model_morning_0[[1]], test1_morning[[1]])
Model_comparison <- function(training_model, test_model){
match_model <- getpars(training_model)
test_model_length <- length(test_model)
print(test_model_length)
#Match the new_model_morning size
match_model <- match_model[1:test_model_length]
print(match_model)
# Compare the test vs training model
test <- setpars(test_model, match_model)
# Calculate Normalize Log-likelihood and BIC for test
normalize_test_loglike <- logLik(test) / nrow(test_model)
bic <- BIC(test)
# Create a return Object
result <- list(normalize_test_loglike, bic)
return(result)
}
test1_morning_result <- Model_comparison(model_morning_0[[1]], test1_morning[[1]])
match_model <- getpars(model_morning_0[[1]])
test_model_length <- length(test1_morning[[1]])
print(test_model_length)
match_model <- match_model[1:test_model_length]
print(match_model)
test <- setpars(test1_morning[[1]], match_model)
test1_morning[[1]]
test_model_evening
test1_model_morning
test1_model_morning[[1]]
Model_comparison <- function(training_model, test_model){
match_model <- getpars(training_model)
test_model_length <- length(test_model)
#Match the new_model_morning size
match_model <- match_model[1:test_model_length]
# Compare the test vs training model
test <- setpars(test_model, match_model)
# Calculate Normalize Log-likelihood and BIC for test
normalize_test_loglike <- logLik(test) / nrow(test_model)
bic <- BIC(test)
# Create a return Object
result <- list(normalize_test_loglike, bic)
return(result)
}
test1_morning_result <- Model_comparison(model_morning_0[[1]], test1_model_morning[[1]])
match_model <- getpars(model_morning_0[[1]])
test_model_length <- length(test1_model_morning[[1]])
print(test_model_length)
aa <- getpars(test1_model_morning)
aa <- getpars(test1_model_morning[[1]])
length(aa)
test_model_length <- length(getpars(test1_model_morning[[1]]))
print(test_model_length)
Model_comparison <- function(training_model, test_model){
match_model <- getpars(training_model)
test_model_length <- length(getpars(test_model))
#Match the new_model_morning size
match_model <- match_model[1:test_model_length]
# Compare the test vs training model
test <- setpars(test_model, match_model)
# Calculate Normalize Log-likelihood and BIC for test
normalize_test_loglike <- logLik(test) / nrow(test_model)
bic <- BIC(test)
# Create a return Object
result <- list(normalize_test_loglike, bic)
return(result)
}
test1_morning_result <- Model_comparison(model_morning_0[[1]], test1_model_morning[[1]])
test1_morning_result[1]
test1_morning_result[[1]]
test1_morning_result[[2]]
test1_morning_result
match_model <- getpars(model_morning_0[[1]])
test_model_length <- length(getpars(test1_model_morning[[1]]))
print(test_model_length)
#Match the new_model_morning size
match_model <- match_model[1:test_model_length]
print(match_model)
# Compare the test vs training model
test <- setpars(test1_morning[[1]], match_model)
# Calculate Normalize Log-likelihood and BIC for test
normalize_test_loglike <- logLik(test) / nrow(test_model)
bic <- BIC(test)
match_model <- getpars(model_morning_0[[1]])
test_model_length <- length(getpars(test1_model_morning[[1]]))
print(test_model_length)
#Match the new_model_morning size
match_model <- match_model[1:test_model_length]
# Compare the test vs training model
test <- setpars(test1_morning[[1]], match_model)
match_model <- getpars(model_morning_0[[1]])
test_model_length <- length(getpars(test1_model_morning[[1]]))
print(test_model_length)
match_model <- match_model[1:test_model_length]
test <- setpars(test1_model_morning[[1]], match_model)
normalize_test_loglike <- logLik(test) / nrow(test1_model_morning[[1]])
normalize_test_loglike
normalize_test_loglike
normalize_test_morning_loglike
logLik(test) /
2
logLik(test)
nrow(test1_model_morning[[1]])
Model_comparison <- function(training_model, test_model, numberOfRow){
match_model <- getpars(training_model)
test_model_length <- length(getpars(test_model))
#Match the new_model_morning size
match_model <- match_model[1:test_model_length]
# Compare the test vs training model
test <- setpars(test_model, match_model)
# Calculate Normalize Log-likelihood and BIC for test
normalize_test_loglike <- logLik(test) / numberOfRow
bic <- BIC(test)
# Create a return Object
result <- list(normalize_test_loglike, bic)
return(result)
}
test1_morning_result <- Model_comparison(model_morning_0[[1]], test1_model_morning[[1]], nrow(test1_morning))
test1_morning_result
test1_morning_result <- Model_comparison(model_morning_0[[1]], test1_model_morning[[1]], nrow(test1_morning))
test2_morning_result <- Model_comparison(model_morning_0[[1]], test2_model_morning[[1]], nrow(test2_morning))
test3_morning_result <- Model_comparison(model_morning_0[[1]], test3_model_morning[[1]], nrow(test3_morning))
test4_morning_result <- Model_comparison(model_morning_0[[1]], test4_model_morning[[1]], nrow(test4_morning))
test5_morning_result <- Model_comparison(model_morning_0[[1]], test5_model_morning[[1]], nrow(test5_morning))
test5_morning_result
test4_morning_result
test3_morning_result
test1_model_evening <- Hmm_model(test1_evening, list(Global_active_power ~ 1, Global_intensity ~ 1),
list(gaussian(), multinomial("identity")), 4)
test2_model_evening <- Hmm_model(test2_evening, list(Global_active_power ~ 1, Global_intensity ~ 1),
list(gaussian(), multinomial("identity")), 4)
test3_model_evening <- Hmm_model(test3_evening, list(Global_active_power ~ 1, Global_intensity ~ 1),
list(gaussian(), multinomial("identity")), 4)
test4_model_evening <- Hmm_model(test4_evening, list(Global_active_power ~ 1, Global_intensity ~ 1),
list(gaussian(), multinomial("identity")), 4)
test5_model_evening <- Hmm_model(test5_evening, list(Global_active_power ~ 1, Global_intensity ~ 1),
list(gaussian(), multinomial("identity")), 4)
test1_evening_result <- Model_comparison(model_evening_0[[1]], test1_model_evening[[1]], nrow(test1_evening))
test2_evening_result <- Model_comparison(model_evening_0[[1]], test2_model_evening[[1]], nrow(test2_evening))
test3_evening_result <- Model_comparison(model_evening_0[[1]], test3_model_evening[[1]], nrow(test3_evening))
test4_evening_result <- Model_comparison(model_evening_0[[1]], test4_model_evening[[1]], nrow(test4_evening))
test5_evening_result <- Model_comparison(model_evening_0[[1]], test5_model_evening[[1]], nrow(test5_evening))
test1_evening_result
